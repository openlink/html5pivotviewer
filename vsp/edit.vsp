<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html version="-//W3C//DTD XHTML 1.1//EN"
      xmlns="http://www.w3.org/1999/xhtml"
      xml:lang="en"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.w3.org/1999/xhtml http://www.w3.org/MarkUp/SCHEMA/xhtml11.xsd"
>
<?vsp
--
--   This file is part of the html5 pivotviewer project
--
--   Copyright (C) 2012-2021 OpenLink Software
--
--   This project is free software; you can redistribute it and/or modify it
--   under the terms of the GNU General Public License as published by the
--   Free Software Foundation; only version 2 of the License, dated June 1991.
--
--   This program is distributed in the hope that it will be useful, but
--   WITHOUT ANY WARRANTY; without even the implied warranty of
--   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
--   General Public License for more details.
--
--   You should have received a copy of the GNU General Public License along
--   with this program; if not, write to the Free Software Foundation, Inc.,
--   51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
--

    declare urlParam any;
    declare urlParts vector;
    declare _serverValue, _serverLabel, _serverLegend varchar;
    declare _newUrl varchar;
    declare cParams integer;
    declare _arr any;
    declare _bookmark varchar;
    declare _link, _c_link varchar;

    --
    -- Check if running https
    --
    declare _proto varchar;
    _proto := 'http';
    if (is_https_ctx()) _proto := 'https';

    --
    --  Get the skin
    --
    declare skinpfx varchar;
    skinpfx := registry_get ('PivotViewerSkinPrefix');
    if (skinpfx = 0) skinpfx := 'skin/';

    --
    --  Get Host info
    --
    declare _host varchar;
    _host := registry_get ('URIQADefaultHost');
    if (_host is null) _host := '__CANNOT_GET_HOST__';
    _host := http_request_header(lines, 'Host', null, _host);

    --
    --  If no url= parameter, maybe user wants to edit a new query
    --
    urlParam := {?'url'};
    if (urlParam is null and {?'serverValue'} is null) urlParam := _proto || '://' || _host || '/sparql';

    if (urlParam is not null)
    {
    	--
	--  Extract bookmark
	--
    	 _arr := rfc1808_parse_uri (urlParam);
	 _bookmark := _arr[5];
	 _arr[5] := '';
	 _c_link := WS.WS.VFS_URI_COMPOSE(_arr);

	 --
	 --  If url is a curi, then deref to get original query
	 --
	 _link := DB.DBA.PV_DEREF_URI (_c_link);

	--
	--  Decompose the url
	--
    	 _arr := rfc1808_parse_uri (_link);

	--
	--  Create server labels
	--
        _serverValue := _arr[0] || '://' || _arr[1] || _arr[2];
        if (strstr(_serverValue, '/sparql')) {
          _serverLabel := 'Query Service Endpoint';
	  _serverLegend := 'Dynamic Collection';
        } else if (_serverValue like '%.cxml') {
          _serverLabel := 'Collection URL';
	  _serverLegend := 'Static Collection';
        } else {
          _serverLabel := 'Query URL';
	  _serverLegend := 'Unknown Collection';
	}

	--
	--  Decode optional parameters
	--
        urlParts := split_and_decode (_arr[4]);
        cParams := length(urlParts);
    } else {
	--
	--  Assemble newURL to be posted to view.vsp
  	---
        declare fragment varchar;
        declare i integer;
        declare firstParam integer;
        declare s_out any;
        firstParam := 1;
        fragment := '';
        s_out := string_output();

        _newUrl := concat (get_keyword('serverValue', params, ''), '?');

        i := 2;
        while (i < length(params))
        {
            if (params[i] <> 'serverValue' and params[i] <> 'submit')
            {
              if (params[i] <> 'bookmark')
                {
                  if (firstParam <> 1)
                    {
                      _newUrl := concat (_newUrl, '&amp;');
                    }
                   else
                    firstParam := 0;
                  http_url(params[i], 0, s_out);
                  _newUrl := concat (_newUrl, string_output_string(s_out), '=');
                  string_output_flush(s_out);
                  http_url( params[i + 1], 0, s_out);
                  _newUrl := concat (_newUrl, string_output_string(s_out));
                  string_output_flush(s_out);
                }
              else
                fragment := params[i + 1];
            }
            i := i + 2;
        }
        if (fragment <> '')
        {
          _newUrl := concat (_newUrl, '#', fragment);
        }
    }

?>

<head profile="http://www.w3.org/1999/xhtml/vocab">
    <title>Pivot Edit</title>
    <link rel="shortcut icon" href="favicon.ico"></link>
    <link rel="stylesheet" type="text/css" href="<?=skinpfx?>ss/style.css" media="screen"/>

   <script type="text/javascript" src="scripts/oplpivot.js"></script>

</head>

<body>
    <div id="PG">
	<div id="HD">
	    <div id="HD_L">
		<a href="/HtmlPivotViewer/"><img class="masthead_logo" src="<?=skinpfx?>i/masthead_logo.png" alt="logo"/></a>
	    </div> <!-- #HD_L -->
	    <div id="HD_M">
		<h1>Pivot Edit</h1>
		<p>Edit a dynamic CXML collection</p>
	    </div> <!-- #HD_M -->
	    <div id="HD_R">
		<div id="MENU">
		    <a href="javascript:history.go(-1);">Back</a>
		</div> <!-- #MENU -->
	    </div> <!-- #HD_R -->
	</div> <!-- #HD -->

    <div id="MD">
<?vsp
        if (urlParam is not null)
        {
            declare i integer;
	    http('<form id="editform" method="post" action="/HtmlPivotViewer/edit.vsp">\r\n');

	    http ('<fieldset>\n');
	    http (sprintf ('<legend>&nbsp;%s&nbsp;</legend>\n', _serverLegend));

	    if (_serverLegend like 'Dynamic%') {
		    http ('<h3>SPARQL</h3>\n');
		    http ('<ol>\n');
		    DB.DBA.PV_GEN_INPUT ('serverValue', 'url', _serverLabel, _serverValue);
		    DB.DBA.PV_GEN_INPUT ('default-graph-uri', 'url', 'Default Data Set Name (Graph IRI)', urlParts);
		    DB.DBA.PV_GEN_INPUT ('query', 'textarea', 'Query Text', urlParts);
		    http ('</ol>\n');

		    http ('<h3>Resultset Options</h3>\n');
		    http ('<ol>\n');
		    DB.DBA.PV_GEN_INPUT ('timeout', 'integer', 'Timeout', urlParts);
		    DB.DBA.PV_GEN_INPUT ('should-sponge', 'sponge', 'Sponging', urlParts);
		    DB.DBA.PV_GEN_INPUT ('format', 'format', 'Format', urlParts);
                    -- Default the Entity Link Style to External resource link
		    if (urlParts is null)
			urlParts := vector ('CXML_redir_for_subjs', '121');
		    DB.DBA.PV_GEN_INPUT ('CXML_redir_for_subjs', 'cxml_style_subjs', 'Entity Link Style', urlParts);
		    DB.DBA.PV_GEN_INPUT ('CXML_redir_for_hrefs', 'cxml_style_hrefs', 'Attribute and Value Link Style', urlParts);
		    http ('</ol>\n');
	    } else {
		    http ('<ol>\n');
		    DB.DBA.PV_GEN_INPUT ('serverValue', 'url', _serverLabel, _serverValue);
		    http ('</ol>\n');
	    }

   	    http ('</fieldset>\n');

	    http ('<p>\n');
	    DB.DBA.PV_GEN_INPUT ('bookmark', 'hidden', '', _bookmark);
	    http ('</p>\n');

	    http ('<p>\n');
	    DB.DBA.PV_GEN_INPUT ('back', 'back', '', '');
	    DB.DBA.PV_GEN_INPUT ('reset', 'reset', '', '');
	    DB.DBA.PV_GEN_INPUT ('submit', 'submit', '', '');
	    http ('</p>\n');
       }
       else
       {
       	    http('<form name="hiddenForm" method="get" action="/HtmlPivotViewer/">');
            http('<input type="hidden" name="url" value="');
            http(_newUrl);
            http('" />');
            http('
    <script type="text/javascript">
      document.hiddenForm.submit()
    </script>
               ');

       }
?>
        </form>
    </div> <!-- #MD -->

    <div id="FT">

    <div id="copyright">
<?vsp
       http('Copyright &copy; 2012-2021 <a href="http://www.openlinksw.com/virtuoso">OpenLink Virtuoso</a>');
       http(sprintf (' version %s, on %s (%s), ', sys_stat('st_dbms_ver'), sys_stat('st_build_opsys_id'), host_id()));
       if (1 = sys_stat('cl_run_local_only'))
           http('Single Server Edition');
       else
           http(sprintf('Cluster Edition (%d server processes)', sys_stat('cl_n_hosts')));
?>
       </div>

    </div> <!-- #FT -->
    </div> <!-- #PG -->
</body>
</html>
